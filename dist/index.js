// plugin/index.ts
import "vite";

// plugin/mockServer.ts
import "connect";

// plugin/utils.ts
import colors from "picocolors";
function isAbsPath(path2) {
  if (!path2) {
    return false;
  }
  if (/^([a-zA-Z]:\\|\\\\|(?:\/|\uFF0F){2,})/.test(path2)) {
    return true;
  }
  return /^\/[^/]/.test(path2);
}
function log(tag) {
  return (name, msg) => {
    console.log([colors.dim((/* @__PURE__ */ new Date()).toLocaleTimeString()), tag, colors.green(name), colors.dim(msg)].join(" "));
  };
}
var logInfo = log(colors.bold(colors.cyan("[vite:mock]")));
var logError = log(colors.bold(colors.red("[vite:mock]")));
var isFunction = (val) => typeof val === "function";

// plugin/mockServer.ts
import path from "path";
import fg from "fast-glob";
import { bundleRequire } from "bundle-require";
import chokidar from "chokidar";
var map = {};
async function mockServer({ mockPath }) {
  if (Object.keys(map).length) return;
  await getMockContent(mockPath);
  createWatcher(mockPath);
}
async function getMockContent(mockPath) {
  const mockDir = getMockDir(mockPath);
  const mockFiles = fg.sync("**/*.{js,ts,mjs}", {
    cwd: mockDir,
    absolute: true
  });
  try {
    const mods = await Promise.all(
      mockFiles.map(async (file) => {
        const res = await bundleRequire({
          filepath: file
        });
        return res.mod.default || res.mod;
      })
    );
    map = mods.reduce((pre, cur) => {
      return { ...pre, ...cur };
    }, {});
  } catch (error) {
    console.log("load mock file: ", error);
  }
}
function createWatcher(mockPath) {
  const mockDir = getMockDir(mockPath);
  const watcher = chokidar.watch(mockDir, {
    ignoreInitial: true,
    // ignore files generated by `bundle require`
    ignored: /\/.*\.bundled_.*\.(mjs|cjs)/
  });
  watcher.on("all", (event, file) => {
    logInfo(`mock file ${event}:`, file);
    getMockContent(mockPath);
  });
}
function getMockDir(mockPath) {
  const cwd = process.cwd();
  return isAbsPath(mockPath) ? mockPath : path.join(cwd, mockPath);
}
function getMockMiddleware(options) {
  return (req, res, next) => {
    const path2 = `${req.method} ${req.url}`;
    const resp = map[path2] || map[req.url];
    if (isFunction(resp)) {
      resp(req, res);
      return;
    }
    if (resp) {
      res.setHeader("Content-Type", "application/json");
      res.end(JSON.stringify(resp));
      return;
    }
    next();
  };
}

// plugin/index.ts
var viteMockPlugin = (options = {}) => {
  const opt = {
    enable: true,
    mockPath: "mock",
    ...options
  };
  return {
    name: "vite-mock-plugin",
    enforce: "pre",
    configResolved: (configResolved) => {
      const isDev = configResolved.command === "serve";
      if (isDev) {
        mockServer(opt);
      }
    },
    configureServer: (server) => {
      if (!opt.enable) {
        return;
      }
      server.middlewares.use(getMockMiddleware(opt));
    }
  };
};
export {
  viteMockPlugin
};
//# sourceMappingURL=index.js.map