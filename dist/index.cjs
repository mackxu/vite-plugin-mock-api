"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// plugin/index.ts
var index_exports = {};
__export(index_exports, {
  viteMockPlugin: () => viteMockPlugin
});
module.exports = __toCommonJS(index_exports);
var import_vite = require("vite");

// plugin/mockServer.ts
var import_connect = require("connect");

// plugin/utils.ts
var import_picocolors = __toESM(require("picocolors"), 1);
function isAbsPath(path2) {
  if (!path2) {
    return false;
  }
  if (/^([a-zA-Z]:\\|\\\\|(?:\/|\uFF0F){2,})/.test(path2)) {
    return true;
  }
  return /^\/[^/]/.test(path2);
}
function log(tag) {
  return (name, msg) => {
    console.log([import_picocolors.default.dim((/* @__PURE__ */ new Date()).toLocaleTimeString()), tag, import_picocolors.default.green(name), import_picocolors.default.dim(msg)].join(" "));
  };
}
var logInfo = log(import_picocolors.default.bold(import_picocolors.default.cyan("[vite:mock]")));
var logError = log(import_picocolors.default.bold(import_picocolors.default.red("[vite:mock]")));
var isFunction = (val) => typeof val === "function";

// plugin/mockServer.ts
var import_node_path = __toESM(require("path"), 1);
var import_fast_glob = __toESM(require("fast-glob"), 1);
var import_bundle_require = require("bundle-require");
var import_chokidar = __toESM(require("chokidar"), 1);
var map = {};
async function mockServer({ mockPath }) {
  if (Object.keys(map).length) return;
  await getMockContent(mockPath);
  createWatcher(mockPath);
}
async function getMockContent(mockPath) {
  const mockDir = getMockDir(mockPath);
  const mockFiles = import_fast_glob.default.sync("**/*.{js,ts,mjs}", {
    cwd: mockDir,
    absolute: true
  });
  try {
    const mods = await Promise.all(
      mockFiles.map(async (file) => {
        const res = await (0, import_bundle_require.bundleRequire)({
          filepath: file
        });
        return res.mod.default || res.mod;
      })
    );
    map = mods.reduce((pre, cur) => {
      return { ...pre, ...cur };
    }, {});
  } catch (error) {
    console.log("load mock file: ", error);
  }
}
function createWatcher(mockPath) {
  const mockDir = getMockDir(mockPath);
  const watcher = import_chokidar.default.watch(mockDir, {
    ignoreInitial: true,
    // ignore files generated by `bundle require`
    ignored: /\/.*\.bundled_.*\.(mjs|cjs)/
  });
  watcher.on("all", (event, file) => {
    logInfo(`mock file ${event}:`, file);
    getMockContent(mockPath);
  });
}
function getMockDir(mockPath) {
  const cwd = process.cwd();
  return isAbsPath(mockPath) ? mockPath : import_node_path.default.join(cwd, mockPath);
}
function getMockMiddleware(options) {
  return (req, res, next) => {
    const path2 = `${req.method} ${req.url}`;
    const resp = map[path2] || map[req.url];
    if (isFunction(resp)) {
      resp(req, res);
      return;
    }
    if (resp) {
      res.setHeader("Content-Type", "application/json");
      res.end(JSON.stringify(resp));
      return;
    }
    next();
  };
}

// plugin/index.ts
var viteMockPlugin = (options = {}) => {
  const opt = {
    enable: true,
    mockPath: "mock",
    ...options
  };
  return {
    name: "vite-mock-plugin",
    enforce: "pre",
    configResolved: (configResolved) => {
      const isDev = configResolved.command === "serve";
      if (isDev) {
        mockServer(opt);
      }
    },
    configureServer: (server) => {
      if (!opt.enable) {
        return;
      }
      server.middlewares.use(getMockMiddleware(opt));
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  viteMockPlugin
});
//# sourceMappingURL=index.cjs.map